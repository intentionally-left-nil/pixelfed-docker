services:
  nginx:
    build:
      context: './config/nginx'
    profiles:
      - prod
    env_file: ./secrets/nginx/.env
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/ssl.conf:/etc/nginx/include.d/ssl.conf:ro
      - ./secrets/nginx/initial_acme_config.tar:/root/initial_acme_config.tar:ro
      - acme:/root/.acme.sh
    networks:
      - www
    ports:
      - '80:80'
      - '443:443'

  db:
    image: postgres:alpine
    profiles:
      - dev
      - prod
    env_file: ./secrets/db/.env
    volumes:
      - db:/var/lib/postgresql/data/
    networks:
      - db
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  pixelfed:
    image: pixelfed
    build:
      context: './pixelfed'
      dockerfile: '../config/pixelfed/Dockerfile'
    profiles:
      - dev
      - prod
    entrypoint: ['/bin/sh']
    command: ['-c', '']
  db_backup:
    build:
      context: './config/db_backup'
    profiles:
      - prod
    env_file: ./secrets/db_backup/.env
    networks:
      - db
  ngrok:
    image: ngrok/ngrok:3-alpine
    profiles:
      - dev
    environment:
      - NGROK_CONFIG=/etc/ngrok.yml
    volumes:
      - ./secrets/ngrok/ngrok.yml:/etc/ngrok.yml:ro
    ports:
      - '4040:4040'
    networks:
      - www

  nginx-dev:
    image: nginx:mainline-alpine
    profiles:
      - dev
    volumes:
      - ./config/nginx_dev/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - www
    ports:
      - '8000:8000'
  redirect-dev:
    build:
      context: './config/redirect_dev'
    profiles:
      - dev
    volumes:
      - ./config/redirect_dev/app.py:/app.py
    networks:
      - www

networks:
  www:
  db:

volumes:
  acme:
  db:
