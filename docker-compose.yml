services:
  nginx:
    build:
      context: './config/nginx'
    profiles:
      - prod
    env_file: ./secrets/nginx/.env
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/ssl.conf:/etc/nginx/include.d/ssl.conf:ro
      - ./secrets/nginx/initial_acme_config.tar:/root/initial_acme_config.tar:ro
      - acme:/root/.acme.sh
    networks:
      - www
      - app
    ports:
      - '80:80'
      - '443:443'
  app_dev:
    image: pixelfed
    profiles:
      - dev
    env_file: ./secrets/pixelfed/dev.env
    init: true
    volumes:
      - './secrets/pixelfed/dev.env:/var/www/.env'
      - './config/pixelfed/php.ini:/usr/local/etc/php/php.ini:ro'
      - pixelfed-storage:/var/www/storage
      - pixelfed-bootstrap:/var/www/bootstrap
    command:
      [
        '/bin/sh',
        '-c',
        'cp -r storage.skel/* storage/ && chown -R www-data:www-data storage/ bootstrap/ && . /var/www/.env && php artisan config:cache && php artisan storage:link && php artisan horizon:publish && php artisan route:cache && php artisan view:cache && php-fpm',
      ]
    networks:
      app:
        aliases:
          - app
      db:
      cache:
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app_dynamic_domain:
        condition: service_completed_successfully

  worker_dev:
    image: pixelfed
    profiles:
      - dev
    env_file: ./secrets/pixelfed/dev.env
    init: true
    volumes:
      - './secrets/pixelfed/dev.env:/var/www/.env'
      - './config/pixelfed/php.ini:/usr/local/etc/php/php.ini:ro'
      - pixelfed-storage:/var/www/storage
      - pixelfed-bootstrap:/var/www/bootstrap
    command: 'gosu www-data php artisan horizon'
    networks:
      app:
      db:
      cache:
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app_dynamic_domain:
        condition: service_completed_successfully
  db:
    image: postgres:alpine
    profiles:
      - setup
      - dev
      - prod
    env_file: ./secrets/db/.env
    volumes:
      - db:/var/lib/postgresql/data/
      - ./config/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - db
    shm_size: 256m
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', 'postgres', '-U', 'postgres']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  initialize:
    image: pixelfed
    profiles:
      - setup
    env_file:
      - ./secrets/pixelfed/dev.env
      - ./secrets/pixelfed/init.env
    volumes:
      - './secrets/pixelfed/dev.env:/var/www/.env'
    networks:
      - db
      - cache
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command:
      [
        '/bin/sh',
        '-c',
        'php artisan migrate && php artisan import:cities && php artisan instance:actor && php artisan config:cache && php artisan route:cache && php artisan view:cache && php artisan passport:client --personal --name=pixelfed -n && php artisan horizon:install && php artisan horizon:publish && (php artisan user:create --name="$$ADMIN_DISPLAY_NAME" --email="$$ADMIN_EMAIL" --username="$$ADMIN_USER_NAME" --password="$$ADMIN_PASSWORD" --is_admin=1 --confirm_email=1 --no-interaction || true)',
      ]

  redis:
    image: redis:alpine
    profiles:
      - setup
      - dev
      - prod
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - cache
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  pixelfed:
    image: pixelfed
    build:
      context: './pixelfed'
      dockerfile: '../config/pixelfed/Dockerfile'
    profiles:
      - setup
    entrypoint: ['/bin/sh']
    command: ['-c', '']
  db_backup:
    build:
      context: './config/db_backup'
    profiles:
      - prod
    env_file: ./secrets/db_backup/.env
    networks:
      - db
  ngrok:
    image: ngrok/ngrok:3-alpine
    profiles:
      - dev
    environment:
      - NGROK_CONFIG=/etc/ngrok.yml
    volumes:
      - ./secrets/ngrok/ngrok.yml:/etc/ngrok.yml:ro
    ports:
      - '4040:4040'
    networks:
      - www
    healthcheck:
      test:
        ['CMD-SHELL', 'wget -O - localhost:4040/api/tunnels | grep public_url']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  app_dynamic_domain:
    image: python:alpine
    profiles:
      - dev
    volumes:
      - ./config/app_dynamic_domain/app.py:/app.py
      - ./secrets/pixelfed/dev.env:/dev.env
    command: ['python', '/app.py']
    networks:
      - www
    depends_on:
      ngrok:
        condition: 'service_healthy'

  nginx_dev:
    image: nginx:mainline-alpine
    restart: 'unless-stopped'
    profiles:
      - dev
    volumes:
      - ./config/nginx_dev/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./pixelfed/public:/var/www/public:ro
    networks:
      - www
      - app
    ports:
      - '8000:8000'
    depends_on:
      - app_dev

  redirect_dev:
    build:
      context: './config/redirect_dev'
    profiles:
      - dev
    volumes:
      - ./config/redirect_dev/app.py:/app.py
    networks:
      - www

networks:
  www:
  db:
  cache:
  app:

volumes:
  acme:
  db:
  redis:
  pixelfed-bootstrap:
  pixelfed-storage:
